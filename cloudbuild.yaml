steps:

  - name: 'node:16'  
    dir: 'frontend'
    args: ['npm', 'install']

  - name: 'node:16'
    dir: 'frontend'
    args: ['npm', 'run', 'build']

  - name: 'gcr.io/cloud-builders/docker'
    dir: 'frontend'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/frontend', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/frontend']


    # Step: Deploy the frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'frontend',
      '--image', 'gcr.io/$PROJECT_ID/frontend',
      '--region', 'us-central1',  # You can specify the appropriate region
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080'  # Default port for most frontend apps
    ]




  # Step 2: Build and package the Service Registry with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/service-registry'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 3: Build and package the API Gateway with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/api-gateway'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 4: Build and package the first microservice with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/user-service'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 5: Build and package the second microservice with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/cashkick-service'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 6: Build and package the third microservice with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/contract-service'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 7: Build and package the fourth microservice with Maven
  - name: 'maven:3.8.3-openjdk-17'
    dir: 'backend/payment-service'
    args: ['mvn', 'clean', 'package', '-DskipTests']

  # Step 8: Build and push Docker images for Service Registry
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/service-registry'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/service-registry', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/service-registry']

  # Step 9: Build and push Docker images for API Gateway
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/api-gateway'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/api-gateway', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/api-gateway']

  # Step 10: Build and push Docker images for Microservice 1
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/user-service'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/user-service', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/user-service']

  # Step 11: Build and push Docker images for Microservice 2
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/cashkick-service'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/cashkick-service', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/cashkick-service']

  # Step 12: Build and push Docker images for Microservice 3
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/contract-service'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/contract-service', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/contract-service']

  # Step 13: Build and push Docker images for Microservice 4
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'backend/payment-service'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/payment-service', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/payment-service']

  # Step 14: Deploy the Service Registry to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'service-registry',
      '--image', 'gcr.io/$PROJECT_ID/service-registry',
      '--region', 'us-central1',  # Specify your region
      '--platform', 'managed',
      '--allow-unauthenticated'
    ]

  # Step 15: Deploy the API Gateway to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'api-gateway',
      '--image', 'gcr.io/$PROJECT_ID/api-gateway',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated'
    ]

  # Step 16: Deploy Microservice 1 to Cloud Run
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: [
  #     'run', 'deploy', 'user-service',
  #     '--image', 'gcr.io/$PROJECT_ID/user-service',
  #     '--region', 'us-central1',
  #     '--platform', 'managed',
  #     '--allow-unauthenticated',
  #     '--port', '8080' 
  #   ]

  # Step 17: Deploy Microservice 2 to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'cashkick-service',
      '--image', 'gcr.io/$PROJECT_ID/cashkick-service',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '9003' 
    ]

  # Step 18: Deploy Microservice 3 to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'contract-service',
      '--image', 'gcr.io/$PROJECT_ID/contract-service',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '9002' 
    ]

  # Step 19: Deploy Microservice 4 to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'payment-service',
      '--image', 'gcr.io/$PROJECT_ID/payment-service',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '9004' 
    ]

options:
  logging: CLOUD_LOGGING_ONLY

images:
  - 'gcr.io/$PROJECT_ID/service-registry'
  - 'gcr.io/$PROJECT_ID/api-gateway'
  - 'gcr.io/$PROJECT_ID/user-service'
  - 'gcr.io/$PROJECT_ID/cashkick-service'
  - 'gcr.io/$PROJECT_ID/contract-service'
  - 'gcr.io/$PROJECT_ID/payment-service'
